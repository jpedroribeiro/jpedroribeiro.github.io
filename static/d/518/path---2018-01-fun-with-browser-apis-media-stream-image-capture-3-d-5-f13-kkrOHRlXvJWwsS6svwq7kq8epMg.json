{"data":{"site":{"siteMetadata":{"title":"J. Pedro Ribeiro","author":"J. Pedro Ribeiro"}},"markdownRemark":{"id":"ed11d530-247d-59e8-bbd2-4851580cb06d","excerpt":"Fun with Browser APIs  is a series of  posts  in which I introduce one or more APIs that you might not heard about or used. This first one on the list is…","html":"<p><strong>Fun with Browser APIs</strong> is a series of <a href=\"http://jpedroribeiro.com/Blog/\">posts</a> in which I introduce one or more APIs that you might not heard about or used.</p>\n<p>This first one on the list is: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Image_Capture_API\">MediaStream Image Capture</a>.</p>\n<h2>What is it about?</h2>\n<p>The <strong>MediaStream Image Capture APi</strong> is an API for capturing <strong>images</strong> or <strong>videos</strong> from devices. It allows <strong>multiple camera</strong> configuration, so you could control the front and back cameras of your mobile phone, for example. The API also enables you to configure <em>flash</em>, <em>red-eye reduction</em>, <em>image size</em> (resolution) and more. Support is currently minimal, to use it with all these feature you’re gonna need <strong>Chrome</strong> 59+.</p>\n<h2>Using the API to capture a camera feed</h2>\n<p>With very little code you can capture a device’s camera feed and use it as a source for a <code class=\"language-text\">video</code> element. For example:</p>\n<p>navigator\n.mediaDevices.getUserMedia({ audio: true, video: true })\n.then(mediaStream => {\nmyVideoElement.srcObject = mediaStream;\n});</p>\n<p>As you can see, <code class=\"language-text\">getUserMedia</code> accepts a <strong>configuration object</strong> with <code class=\"language-text\">audio</code> and <code class=\"language-text\">video</code>. They can either have <em>boolean</em> values, telling the API whether you want audio and video, or, an <em>object</em>, if you need to specify more details of how you want the <strong>stream</strong> to be, for example: <code class=\"language-text\">video: {width 600, height: 480}</code>.</p>\n<p>It’s worth to note that these options will be taken into account depending on the <strong>device capabilities</strong>. It also defaults to max resolution.</p>\n<h2>Using the API to take photos</h2>\n<p>Expanding the example above, you can use the mediaStream track to create an instance of ImageCapture, which will then let you:</p>\n<ul>\n<li>Grab a frame of the video feed, using <code class=\"language-text\">grapFrame</code></li>\n<li>Take a photo using the camera’s full capabilities, using <code class=\"language-text\">takePhoto</code></li>\n</ul>\n<p>And the code would be something like this:</p>\n<p>navigator\n.mediaDevices.getUserMedia({ audio: true, video: true })\n.then(mediaStream => {\nconst track = mediaStream.getVideoTracks()[0];\nconst imageCapture = new ImageCapture(track);\nimageCapture.grabFrame()\n.then(frame => {\nmyImageElement.src = frame;\n});\n});</p>\n<p>In this example, I’ve used <code class=\"language-text\">frame</code> as a source for an <code class=\"language-text\">image</code> tag, but you could also use it to populate a <code class=\"language-text\">canvas</code> element.</p>\n<h2>Conclusion</h2>\n<p>MediaStream combined with Image Capture gives you full control of the camera feeds of a device, with very little code.</p>\n<p>I’ve create a more complete example on this GitHub repo <a href=\"https://github.com/jpedroribeiro/FunWithBrowserAPIs/tree/master/imagecapture\">https://github.com/jpedroribeiro/FunWithBrowserAPIs/tree/master/imagecapture</a> where I combined these APIs with <code class=\"language-text\">canvas</code> to create a very basic image manipulation app.</p>","frontmatter":{"title":"Fun with Browser APIs: Media Stream Image Capture","date":"January 26, 2018"}}},"pageContext":{"slug":"/2018/01/fun-with-browser-apis-media-stream-image-capture/","previous":{"fields":{"slug":"/2018/01/accessibility-tests-with-pa11y-node/"},"frontmatter":{"title":"Accessibility Tests with Pa11y & Node"}},"next":{"fields":{"slug":"/2018/02/fun-with-browser-apis-shape-detection/"},"frontmatter":{"title":"Fun with Browser APIs: Shape Detection"}}}}