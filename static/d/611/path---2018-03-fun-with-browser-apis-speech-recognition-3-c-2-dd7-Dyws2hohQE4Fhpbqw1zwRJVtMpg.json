{"data":{"site":{"siteMetadata":{"title":"J. Pedro Ribeiro","author":"J. Pedro Ribeiro"}},"markdownRemark":{"id":"c4367f8e-d8a9-5219-a114-dda215f67e64","excerpt":"On this third post about  browser APIs  we’re gonna talk about audio, or more specifically, speech. The  Web Speech API  is compromised of two interfaces, and…","html":"<p>On this third post about <a href=\"http://jpedroribeiro.com/tag/apis/\">browser APIs</a> we’re gonna talk about audio, or more specifically, speech. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API\">Web Speech API</a> is compromised of two interfaces, and today we’re going to talk about one of them: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition\">Speech Recognition</a>.</p>\n<h2>What is it about?</h2>\n<p>The <strong>Speech Recognition API</strong> takes a speech input (via microfone) and outputs a list of results, which including the transcript and the confidence level of that translation. It is customisable, letting you define what <strong>language</strong> you’re using and what words (<strong>Grammar</strong>) you are interested in.</p>\n<p>The <em>confidence level</em> (0-1) changes over time, meaning that as you speak, new results are output replacing the initial <em>guess</em>. When the system is happy with the results, a boolean flag <code class=\"language-text\">isFinal</code> comes true and it moves on to following parts of the speech.</p>\n<h2>Using the API to type as you speak</h2>\n<p>A simple speech to text application could be done with the following code:</p>\n<p>const speech = new SpeechRecognition();\nspeech.lang = ‘en-US’;\nspeech.onresult = (event) => {\nconsole.log(event.results[0][0].transcript\n}\nspeech.start();</p>\n<h2>Grammar</h2>\n<p>On that example, more options could be applied to the <code class=\"language-text\">speech</code> variable, like <code class=\"language-text\">grammar</code>. Grammar must be written using the JSpeech Grammar Format, you can ream about it in the <a href=\"https://www.w3.org/TR/jsgf/\">spec document</a>.</p>\n<h2>Conclusion</h2>\n<p>With just a few lines we managed to translate speech into text, which then can be used by your application to do as you please. You could, for example, create a voice activated app by limiting the grammar and taking actions depending on which word was said.</p>\n<p>A more complete example is available on <a href=\"https://github.com/jpedroribeiro/FunWithBrowserAPIs/tree/master/speechrecognition\">this GitHub repo</a>, where apart from a simple dictation, I’ve added a voice functionality to search for merchants on a website.</p>","frontmatter":{"title":"Fun with Browser APIs: Speech Recognition","date":"March 04, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/03/fun-with-browser-apis-speech-recognition/","previous":{"fields":{"slug":"/2018/02/fun-with-browser-apis-shape-detection/"},"frontmatter":{"title":"Fun with Browser APIs: Shape Detection","tags":["shape","api","detection","browser","barcode","faces","feed"]}},"next":{"fields":{"slug":"/2018/05/fun-with-browser-apis-speech-synthesis/"},"frontmatter":{"title":"Fun with Browser APIs: Speech Synthesis","tags":["speech","api","synthesis"]}}}}