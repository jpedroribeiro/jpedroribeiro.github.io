{"data":{"site":{"siteMetadata":{"title":"J. Pedro Ribeiro","author":"J. Pedro Ribeiro"}},"markdownRemark":{"id":"e67db04d-c65b-5b24-b643-2b30f66f7608","excerpt":"If you try  renaming  a file in your project, you might notice this weird behaviour when checking its  status : ` $  git status On branch master Your branch is…","html":"<p>If you try <strong>renaming</strong> a file in your project, you might notice this weird behaviour when checking its <strong>status</strong>: `$ git status On branch master Your branch is up-to-date with ‘origin/master’.</p>\n<p>Changes not staged for commit: (use “git add/rm …” to update what will be committed) (use “git checkout — …” to discard changes in working directory)</p>\n<p>deleted: README.md</p>\n<p>Untracked files: (use “git add …” to include in what will be committed)</p>\n<p>README-NEW.md</p>\n<p>no changes added to commit (use “git add” and/or “git commit -a”)`</p>\n<h2>Why is this happening?</h2>\n<p>The short answer is: <strong>Git</strong> relies on <strong>names</strong> to know if whether a file is <strong>tracked</strong> or not. When you rename a file, <a href=\"http://jpedroribeiro.com/tag/git/\">Git</a> believes the original file got deleted and suddenly there’s a new file in which it knows nothing about. Hence the <em>untracked</em> status.</p>\n<h2>Alternative: rename with Git</h2>\n<p>If you want to avoid this behaviour, you could simply use the native <a href=\"http://jpedroribeiro.com/tag/git/\">Git</a> command: <em>git mv</em> `$ git mv README.md README-NEW.md $ git status On branch master Your branch is up-to-date with ‘origin/master’.</p>\n<p>Changes to be committed: (use “git reset HEAD …” to unstage)</p>\n<p>renamed: README.md -> README-NEW.md`</p>\n<p>Nice and easy.</p>","frontmatter":{"title":"What's the deal with renaming files in Git?","date":"June 11, 2016"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016/06/whats-the-deal-with-renaming-files-in-git/","previous":{"fields":{"slug":"/2016/05/understanding-bandwidth-vs-latency-through-an-analogy/"},"frontmatter":{"title":"Understanding Bandwidth vs Latency Through An Analogy","tags":["performance","latency","bandwidth"]}},"next":{"fields":{"slug":"/2016/08/book-review-using-webpagetest/"},"frontmatter":{"title":"Book Review: Using WebPageTest","tags":["book review","performance"]}}}}